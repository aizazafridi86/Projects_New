using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

namespace EA_Visualization_Software.PSO_Algorithm
{
    public class Particle
    {
        public string inputFunction;
        public double lowerRange;
        public double higherRange;
        public int posClampVelocity;
        public int negClampVelocity;
        public int numberOfTimeSteps;

        public List<double> genes = new List<double>();
        public List<string> initialGenes = new List<string>();
        public List<string> uniqueGenesFound = new List<string>();
        public int numberOfGenes;
        public int velocity;

        public Particle(string inputFunction,double lowerRange,double higherRange,int posClampVelocity,int negClampVelocity,int numberOfTimeSteps )
        {
            this.inputFunction = inputFunction;
            this.lowerRange = lowerRange;
            this.higherRange = higherRange;
            this.posClampVelocity = posClampVelocity;
            this.negClampVelocity = negClampVelocity;
            this.numberOfTimeSteps = numberOfTimeSteps;

            Random random= new Random();
 
            //adding all variables to initialGenes list
            foreach (Match match in Regex.Matches(this.inputFunction,"[a-zA-Z]"))
            {
                this.initialGenes.Add(match.Value);
            }

            //adding only unique variables to genes list
            for(int i=0; i<initialGenes.Count; i++)
            {
                if(!uniqueGenesFound.Contains(initialGenes[i]))
                {
                    uniqueGenesFound.Add(initialGenes[i]);
                }
            }

            //Finally, initializing genes values
            for(int i=0; i<uniqueGenesFound.Count; i++)
            {
                double value = random.NextDouble()*(this.higherRange-this.lowerRange) + this.lowerRange;
                genes.Add(value);
            }
          
        }

    }
}
