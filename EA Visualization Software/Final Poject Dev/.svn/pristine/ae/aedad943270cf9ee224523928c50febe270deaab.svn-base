using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EA_Visualization_Software.GA
{
    public class MatingSelection
    {
        //initialize list of offsprings that would store selected offsprings
        //List<Offspring> offspring;

        //Initialize Random class for random number generation
        //Random random = new Random();

        public bool is_positive = true;

        //Tournament selection method for minimization problems
        public List<Offspring> tournament_selection_minimization(List<Individual> ind,List<Offspring>offspring,int pop_size,int offspring_size, int tournament_size, int number_genes,Random random)
        {
            int numberOfGenes=number_genes;
            List<int> selected_ind = new List<int>();
            List<double> fitness_selected_ind=new List<double>();
            List<double> uniqueRandomNumbers = new List<double>();
            int final_selected_individual;
            double min_fitness;
            int random_number;
   
            //select parents for mating and put them in offspring population that would be later modified by recombination and mutation
            for (int i = 0; i < offspring_size; i++)
            {
                //selecting individuals and calculating their fitness
                for(int j=0;j<tournament_size;j++)
                {
                    //selected_ind[j]=random.Next(0,pop_size);
                    random_number = random.Next(0, pop_size - 1);

                    //making sure that same individual is not selected twice
                    while (uniqueRandomNumbers.Contains(random_number))
                    {
                        random_number = random.Next(0, pop_size - 1);
                    }

                    //adding the value to unique random number list
                    uniqueRandomNumbers.Add(random_number);

                    //finally selecting the individual for tournament 
                    selected_ind[j] = random_number;

                    //calculating fitness of selected individual and storing it in a list
                    fitness_selected_ind[j]= ind[selected_ind[j]].CalculateFitness();
                }

                //selecting individual having the best fitness and copying it to the offspring list
                min_fitness=fitness_selected_ind[0];
                final_selected_individual=0;

                for(int j=1;j<tournament_size;j++)
                {
                    if(fitness_selected_ind[j]<min_fitness)
                    {
                        final_selected_individual=j;
                    }
                }

                //finally, copying selected individual to offspring list
                for(int j=0; j<numberOfGenes; j++)
                {
                    offspring[i].genes[j]=ind[final_selected_individual].genes[j];
                }

                //clearing the list that contains the unique random numbers for the next round of tournament
                uniqueRandomNumbers.Clear();

            }
            //return list of offsprings
            return offspring;
        }

        //Tournament selection method for maximization problems
        public List<Offspring> tournament_selection_maximization(List<Individual> ind, List<Offspring> offspring, int pop_size, int offspring_size, int tournament_size, int number_genes,Random random)
        {
            int numberOfGenes = number_genes;
            List<int> selected_ind = new List<int>();
            List<double> fitness_selected_ind = new List<double>();
            List<double> uniqueRandomNumbers = new List<double>();
            int final_selected_individual;
            double max_fitness;
            int random_number;

            //select parents for mating and put them in offspring population that would be later modified by recombination and mutation
            for (int i = 0; i < offspring_size; i++)
            {
                //selecting individuals and calculating their fitness
                for (int j = 0; j < tournament_size; j++)
                {
                    random_number = random.Next(0, pop_size - 1);

                    //making sure that same individual is not selected twice
                    while (uniqueRandomNumbers.Contains(random_number))
                    {
                        random_number = random.Next(0, pop_size - 1);
                    }

                    //adding the value to unique random number list
                    uniqueRandomNumbers.Add(random_number);

                    //finally selecting the individual for tournament 
                    selected_ind[j] = random_number;

                    //calculating fitness of selected individual and storing it in a list
                    fitness_selected_ind[j] = ind[selected_ind[j]].CalculateFitness();
                }

                //selecting individual having the best fitness and copying it to the offspring list
                max_fitness = fitness_selected_ind[0];
                final_selected_individual = 0;

                for (int j = 1; j < tournament_size; j++)
                {
                    if (fitness_selected_ind[j] > max_fitness)
                    {
                        final_selected_individual = j;
                    }
                }

                //finally, copying selected individual to offspring list
                for (int j = 0; j < numberOfGenes; j++)
                {
                    offspring[i].genes[j] = ind[final_selected_individual].genes[j];
                }

                //clearing the list that contains the unique random numbers for the next round of tournament
                uniqueRandomNumbers.Clear();

            }
            //return list of offsprings
            return offspring;
        }

        //Fitness Proportionate Selection Method (Minimization Problem)
        public List<Offspring> fitness_proportionate_maximization(List<Individual> ind, List<Offspring> offspring, int pop_size, int offspring_size, int number_genes, Random random)
        {
            List<double> fitness = new List<double>();
            List<double> prob = new List<double>();
            double fitness_sum = 0;
            double number;
            int selected_individual = 0;
            int constant = 10;

            //calculating fitness of each individual and storing it in a list
            for(int i=0; i<pop_size; i++)
            {
                fitness[i] = ind[i].CalculateFitness();
                
                if(fitness[i]<0)
                {
                    this.is_positive = false;
                }
            }

            //making sure that no fitness value is negative as it wont work when we calculate the probabilities
            //adding a constant to all fitness values if any of the fitness value is negative
            while(this.is_positive == false)
            {
                fitness = this.add_constant(fitness, pop_size, constant);
                constant = constant + 10;
            }

            //calculating fitness sum
            for (int i = 0; i < pop_size;i++)
            {
                fitness_sum = fitness_sum + fitness[i];
            }

            //calculating selection probability of each individual
            for (int i = 0; i < pop_size; i++)
            {
                prob[i] = fitness[i] / fitness_sum;
            }

            //assigning portion of Roulette Wheel to each individual based on its probability
            //for individual 0
            //lower range of individual 0 starts from 0 and ends in the fitness of individual
            ind[0].wheel_lowerRange = 0;
            ind[0].wheel_higherRange = fitness[0];

            //for rest of individuals
            for (int i = 1; i < pop_size; i++)
            {
                ind[i].wheel_lowerRange = ind[i - 1].wheel_higherRange;
                ind[i].wheel_higherRange = ind[i - 1].wheel_higherRange + fitness[i];
            }

            //finally, selecting individuals 
            for (int i = 0; i < offspring_size; i++)
            {
                //generating random number between 0 and 1
                number = random.NextDouble();

                //finding out the number lies within which individual portion of the wheel
                //selecting that individual 
                for (int j = 0; j < pop_size; j++ )
                {
                    if(number>ind[j].wheel_lowerRange && number<=ind[j].wheel_higherRange)
                    {
                        selected_individual = j;
                    }
                }

                //copying selected individual to offspring list
                for (int j = 0; j < number_genes; j++)
                {
                    offspring[i].genes[j] = ind[selected_individual].genes[j];
                }
               
            }

                //returing list of selected offspring
                return offspring;
        }

        //method that adds constant positive value to fitness list
        public List<double> add_constant(List<double> fitness, int pop_size, int constant)
        {
            int count = 0;
            //adding a constant value to fitness to make it positive
            for(int i=0; i<pop_size; i++)
            {
                fitness[i] = fitness[i] + constant;

                if(fitness[i] <0)
                {
                    count++;
                }
            }

            //if all the fitness values are positive, then count would be 0
            //if count is zero then we need to make is_pisitive true
            if(count ==0)
            {
                this.is_positive = true;
            }

         //return new fitness fitness values   
         return fitness;

        }


    }
}
