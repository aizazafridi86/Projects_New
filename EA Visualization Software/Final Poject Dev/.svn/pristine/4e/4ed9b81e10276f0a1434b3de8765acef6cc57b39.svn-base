using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using EA_Visualization_Software.Common;

namespace EA_Visualization_Software.PSO_Algorithm
{
    public class PSController
    {

        //Initializing Variables
        string inputFunction;
        int lowerRange;
        int higherRange;
        string updateRule;
        int posClampVelocity;
        int negClampVelocity;
        int numberOfParticles;
        int numberOfTimeSteps;
        int numberOfRuns;
        string optimizationType;
        int best_index;

        List<string> uniqueGenesFound = new List<string>();

        //creating instance of CalculateGBest class
        CalculateGBest gbest = new CalculateGBest();

        //creating isntance of Inertia class
        Inertia inertia = new Inertia();

        //creating instance of class CalculateAverageFitness
        CalculateAverageFitness averageFitness = new CalculateAverageFitness();

        //Creatung instance of output class
        Output output = new Output();

        //creating instance of CountGenes class
        CountGenes countGenes = new CountGenes();

        //This method set values of all variables that are passed by the GUI
        public void Initialize(string inputFunction,int lowerRange,int higherRange,string updateRule,int posClampVelocity,int negClampVelocity,int numberOfParticles,int numberOfTimeSteps,int numberOfRuns, string optimizationType)
        {
            this.inputFunction = inputFunction;
            this.lowerRange = lowerRange;
            this.higherRange = higherRange;
            this.updateRule = updateRule;
            this.posClampVelocity = posClampVelocity;
            this.negClampVelocity = negClampVelocity;
            this.numberOfParticles = numberOfParticles;
            this.numberOfTimeSteps = numberOfTimeSteps;
            this.numberOfRuns = numberOfRuns;
            this.optimizationType = optimizationType;

        }

        //Running PS Algorithm
        public Output RunPSAlgorithm()
        {    
            //Initializing list of particles
            List<Particle> particle = new List<Particle>();    

            //counting number of genes in input function
            this.uniqueGenesFound = this.countGenes.Return_NumberOfGenes(this.inputFunction);

            //creating particles and initializing their variables
            for (int i = 0; i < this.numberOfParticles; i++)
            {
                particle.Add(new Particle(this.inputFunction, this.lowerRange, this.higherRange, this.posClampVelocity, this.negClampVelocity, this.numberOfTimeSteps, this.uniqueGenesFound));
            } 

            //calling method for linear decreasing minimization problem
            //this.Decreasing_Minimize(particle);

            //calling method for linear increasing minimization problem
            this.Increase_Minimize(particle);
                        
            //returning instance of output class to the GUI
            return this.output;
            
        }

        public void Decreasing_Minimize(List<Particle> particle)
        {

            //Initializing linear decreasing inertia 
            this.inertia.Initialize_LinearDecreasingInertia();

            //for timestep=1
            //adding best particle fitness to output class bestFitness dictionary
            this.best_index = this.gbest.Return_gbest_Minimization(particle, this.numberOfParticles);
            this.output.Add_Best(1, particle[this.best_index].ReturnFitness());

            //adding average fitness to output class averageFitness list
            this.output.Add_Average(1, this.averageFitness.Return_AverageFitness(particle, this.numberOfParticles));

            //updating velocity and position of all particles in all dimensions
            for (int i = 0; i < this.numberOfParticles; i++)
            {
                particle[i].Update_LinearDecreasingVelocity(particle[this.best_index], this.inertia.wt);
                particle[i].Update_Position();
            }

            System.Diagnostics.Debug.WriteLine(this.inertia.wt);

            //for rest of timesteps
            for (int i = 2; i <= this.numberOfTimeSteps; i++)
            {
                //calculating best particle
                this.best_index = this.gbest.Return_gbest_Minimization(particle, this.numberOfParticles);

                //adding best particle fitness to output class
                this.output.Add_Best(i, particle[this.best_index].ReturnFitness());

                //adding average fitness to outout class
                this.output.Add_Average(i, this.averageFitness.Return_AverageFitness(particle, this.numberOfParticles));

                //updating inertia
                this.inertia.Update_LinearDecreasingInertia(this.numberOfTimeSteps, i);

                System.Diagnostics.Debug.WriteLine(this.inertia.wt);

                //updating velocity and position
                for (int j = 0; j < this.numberOfParticles; j++)
                {
                    //every particle calculating its own personal best
                    particle[j].Calculate_Pbest();

                    //updating velocity
                    particle[j].Update_LinearDecreasingVelocity(particle[this.best_index], this.inertia.wt);

                    //updating position
                    particle[j].Update_Position();
                }

            }

        }

        public void Increase_Minimize(List<Particle> particle)
        {
            //Initializing linear increasing inertia 
            this.inertia.Initialize_LinearIncreasingInertia();

            //for timestep=1
            //adding best particle fitness to output class bestFitness dictionary
            this.best_index = this.gbest.Return_gbest_Minimization(particle, this.numberOfParticles);
            this.output.Add_Best(1, particle[this.best_index].ReturnFitness());

            //adding average fitness to output class averageFitness list
            this.output.Add_Average(1, this.averageFitness.Return_AverageFitness(particle, this.numberOfParticles));

            //updating velocity and position of all particles in all dimensions
            for (int i = 0; i < this.numberOfParticles; i++)
            {
                particle[i].Update_LinearIncreasingVelocity(particle[this.best_index], this.inertia.wt);
                particle[i].Update_Position();
            }

            System.Diagnostics.Debug.WriteLine(this.inertia.wt);

            //for rest of timesteps
            for (int i = 2; i <= this.numberOfTimeSteps; i++)
            {
                //calculating best particle
                this.best_index = this.gbest.Return_gbest_Minimization(particle, this.numberOfParticles);

                //adding best particle fitness to output class
                this.output.Add_Best(i, particle[this.best_index].ReturnFitness());

                //adding average fitness to outout class
                this.output.Add_Average(i, this.averageFitness.Return_AverageFitness(particle, this.numberOfParticles));

                //updating inertia
                this.inertia.Update_LinearIncreasingInertia(this.numberOfTimeSteps, i);

                System.Diagnostics.Debug.WriteLine(this.inertia.wt);

                //updating velocity and position
                for (int j = 0; j < this.numberOfParticles; j++)
                {
                    //every particle calculating its own personal best
                    particle[j].Calculate_Pbest();

                    //updating velocity
                    particle[j].Update_LinearDecreasingVelocity(particle[this.best_index], this.inertia.wt);

                    //updating position
                    particle[j].Update_Position();
                }

            }

        }
    }
}
