using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using EA_Visualization_Software.PSO_Algorithm;
using EA_Visualization_Software.Common;
using System.Text.RegularExpressions;

namespace EA_Visualization_Software
{
    public partial class EAVisualization : Form
    {
        //public Output output;
        public List<Output> output;
        public int numberOfTimeSteps;
        public int numberOfRuns;

        //dictionaries that stores average of bestFitness,averageFitness and dispersion of all runs for each timestep
        Dictionary<int, double> bestFitness_Average = new Dictionary<int, double>();
        Dictionary<int, double> averageFitness_Average = new Dictionary<int, double>();
        Dictionary<int, double> dispersion_Average = new Dictionary<int, double>();

        //Error messages that would be shown if the validation fails
        string inputErr;
        string lowerRangeErr;
        string higherRangeErr;
        string updateRuleErr;
        string posClampErr;
        string negClampErr;
        string numberOfParticlesErr;
        string numberOfTimeStepsErr;
        string numberOfRunsErr;

        public EAVisualization()
        {
            InitializeComponent();
            this.showLaunchPanel();
        }

        //Launching PS Panel for the user to enter values for Particle Swarm optimization Algorithm
        private void LaunchPS_Click(object sender, EventArgs e)
        {
            //showing PS Panel
            this.showPSPanel();
            //disable output options 
            this.DisableOutPutOptions();
        }

        //Launching Particle Swarm Optimization Algorithm
        private void runPSOButton_Click(object sender, EventArgs e)
        {

            //validating all values
            bool validation = this.Validate_PS_Values();

            if (validation == false)
            {
                MessageBox.Show(this.inputErr + "\n" + this.lowerRangeErr + "\n" + this.higherRangeErr + "\n" + this.updateRuleErr + "\n" + this.posClampErr + "\n" + this.negClampErr + "\n" + this.numberOfParticlesErr + "\n" + this.numberOfTimeStepsErr + "\n" + this.numberOfRunsErr);
                this.clearErrorMessages();
            }

            //run the algorithm only if validation is successfull
            else
            {

                //getting all user input values and storing them in local variables
                string inputFunction = this.inputFunctionTextBox.Text.ToString();
                int lowerRange = Convert.ToInt32(this.lowerRangeTextBox.Text);
                int higherRange = Convert.ToInt32(this.higherRangeTextBox.Text);
                string updateRule = this.updateRuleComboBox.Items[this.updateRuleComboBox.SelectedIndex].ToString();
                int posClampVelocity = Convert.ToInt32(this.posClampVelocityTextBox.Text);
                int negClampVelocity = Convert.ToInt32(this.negClampVelocityTextBox.Text);
                int numberOfParticles = Convert.ToInt32(this.numberOfParticlesComboBox.Items[this.numberOfParticlesComboBox.SelectedIndex]);
                int numberOfTimeSteps = Convert.ToInt32(this.numberOfTimeStepsComboBox.Items[this.numberOfTimeStepsComboBox.SelectedIndex]);
                int numberOfRuns = Convert.ToInt32(this.numberOfRunsComboBox.Items[this.numberOfRunsComboBox.SelectedIndex]);
                string optimizationType;

                this.numberOfTimeSteps = numberOfTimeSteps;
                this.numberOfRuns = numberOfRuns;

                if (this.minimizeRadioButton.Checked)
                {
                    optimizationType = this.minimizeRadioButton.Text.ToString();
                }

                else
                {
                    optimizationType = this.maximizeRadioButton.Text.ToString();
                }

                //Creating Instance of PS Controller
                PSController controller = new PSController();

                //passing variable values to Controller
                controller.Initialize(inputFunction, lowerRange, higherRange, updateRule, posClampVelocity, negClampVelocity, numberOfParticles, numberOfTimeSteps, numberOfRuns, optimizationType);

                //Running PSO Algorithm
                this.output = controller.RunPSAlgorithm();

                //calculating average of each timeStep of all runs
                this.CalculateAverage();

                //appending data to text boxes
                this.ShowDataInTextBoxes();

                //method that plot charts
                this.PlotCharts();

                //disable all controls when the output is generated
                this.DisableAll();

                //enable output controls
                this.EnableOutputOptions();
            }

        }

        //method that calcualtes the average of bestFitness,averageFitness and dispersion in each time step for all runs
        public void CalculateAverage()
        {

            //calculating average of best fitness, average fitness and dispersion, storing the values in dictionaries and showing it in 
            //text box in GUI
            for (int timeStep = 1; timeStep <= this.numberOfTimeSteps; timeStep++)
            {
                //variables for calculating average
                double best = 0;
                double average = 0;
                double disp = 0;

                //calculating average
                for (int run = 0; run < this.numberOfRuns; run++)
                {
                    best = best + this.output[run].bestFitness[timeStep];
                    average = average + this.output[run].averageFitness[timeStep];
                    disp = disp + this.output[run].dispersion[timeStep];
                }
                best = best / this.numberOfRuns;
                average = average / this.numberOfRuns;
                disp = disp / this.numberOfRuns;

                //adding values to dictionaries
                this.bestFitness_Average.Add(timeStep, best);
                this.averageFitness_Average.Add(timeStep, average);
                this.dispersion_Average.Add(timeStep, disp);
            }
        }

       //method that appends data to the textboxes
       public void ShowDataInTextBoxes()
       {
            
           for(int timeStep=1; timeStep<=this.numberOfTimeSteps; timeStep++)
           {
              OutputbestFitness.AppendText(timeStep.ToString() + ".\t");
              OutputbestFitness.AppendText(this.bestFitness_Average[timeStep].ToString());
              OutputbestFitness.AppendText("\n");

              outputAverageFitness.AppendText(timeStep.ToString() + ".\t");
              outputAverageFitness.AppendText(this.averageFitness_Average[timeStep].ToString());
              outputAverageFitness.AppendText("\n");

              outputDispersion.AppendText(timeStep.ToString() + ".\t");
              outputDispersion.AppendText(this.dispersion_Average[timeStep].ToString());
              outputDispersion.AppendText("\n");
           }

        }

        public void PlotCharts()
       {
           //plotting best individual fitness in each time step
           //chart1.Series.Add("Best Fitness");
           for (int timeStep = 1; timeStep <= this.numberOfTimeSteps; timeStep++)
           {
               chart1.Series["Best Fitness"].Points.AddXY(Convert.ToDouble(timeStep), this.bestFitness_Average[timeStep].ToString());
           }

           //plotting population average fitness in each time step
           //chart2.Series.Add("Average Fitness");
           for (int timeStep = 1; timeStep <= this.numberOfTimeSteps; timeStep++)
           {       
               chart2.Series["Average Fitness"].Points.AddXY(Convert.ToDouble(timeStep), this.averageFitness_Average[timeStep].ToString());
           }

           //plotting population dispersion in each time step
           //chart3.Series.Add("Dispersion");
           for (int timeStep = 1; timeStep <= this.numberOfTimeSteps; timeStep++)
           {  
               chart3.Series["Dispersion"].Points.AddXY(Convert.ToDouble(timeStep), this.dispersion_Average[timeStep].ToString());
           }

       }

        //method that shows best fitness plot
        private void bestFitnessPlot_Click(object sender, EventArgs e)
        {
            this.plotPanel.Show();
            chart1.Show();
            chart2.Hide();
            chart3.Hide();
        }

        //method that shows population average fitness plot
        private void averageFitnessPlot_Click(object sender, EventArgs e)
        {
            this.plotPanel.Show();
            chart2.Show();
            chart1.Hide();
            chart3.Hide();         
        }

        //method that shows popilation dispersion plot
        private void dispersionPlot_Click(object sender, EventArgs e)
        {
            this.plotPanel.Show();
            chart3.Show();
            chart1.Hide();
            chart2.Hide();                          
        }

        //method that shows the output data
        private void showDataButton_Click(object sender, EventArgs e)
        {
            chart1.Hide();
            chart2.Hide();
            chart3.Hide();
            this.showPSPanel();
        }

        //managing panels
        public void showPSPanel()
        {
            this.PSPanel.Show();
            this.launchPanel.Hide();
            this.outputPanel.Show();
            this.plotPanel.Hide();  
        }

        public void showLaunchPanel()
        {
            this.launchPanel.Show();
            this.PSPanel.Hide();
            this.outputPanel.Hide();
            this.plotPanel.Hide();
           
        }

        public void showPlotPanel()
        {
            
            this.PSPanel.Show();
            this.launchPanel.Hide();
            this.outputPanel.Hide();
            this.plotPanel.Show();
        }

        public bool Validate_PS_Values()
        {
            bool validation = true;

            //validating lower range text box
            if(!System.Text.RegularExpressions.Regex.IsMatch(this.lowerRangeTextBox.Text, "[ ^ 0-9]") )
            {
                validation = false;
                this.lowerRangeErr = "Please select a valid lower range";
            }
           
            //validating higher range text box
            if (!System.Text.RegularExpressions.Regex.IsMatch(this.higherRangeTextBox.Text, "[ ^ 0-9]"))
            {
                validation = false;
                this.higherRangeErr = "Please select a valid higher range";
            }

            //validating update rule combo box
            if(this.updateRuleComboBox.SelectedIndex == -1)
            {
                validation = false;
                this.updateRuleErr = "Please select velocity update rule";
            }

            //validating positive clamp velocity
            if (!System.Text.RegularExpressions.Regex.IsMatch(this.posClampVelocityTextBox.Text, "[ ^ 0-9]"))
            {
                validation = false;
                this.posClampErr = "Please select a valid positive clamp velocity";
            }

            //validating negative clamp velocity
            if (!System.Text.RegularExpressions.Regex.IsMatch(this.negClampVelocityTextBox.Text, "[ ^ 0-9]"))
            {
                validation = false;
                this.negClampErr = "Please select a valid negative clamp velocity";
            }

            //validating number of particles combox
            if (this.numberOfParticlesComboBox.SelectedIndex == -1)
            {
                validation = false;
                this.numberOfParticlesErr = "Please select number of particles";
            }

            //validating number of time steps combobox
            if (this.numberOfTimeStepsComboBox.SelectedIndex == -1)
            {
                validation = false;
                this.numberOfTimeStepsErr = "Please select number of time steps";
            }

            //validating number of runs combo box
            if (this.numberOfRunsComboBox.SelectedIndex == -1)
            {
                validation = false;
                this.numberOfRunsErr = "Please select number of runs";
            }

            //validating conversion 
            try
            {
                Convert.ToInt32(this.lowerRangeTextBox.Text.ToString());
                Convert.ToInt32(this.higherRangeTextBox.Text.ToString());
                Convert.ToInt32(this.posClampVelocityTextBox.Text.ToString());
                Convert.ToInt32(this.negClampVelocityTextBox.Text.ToString());
            }
            catch (FormatException)
            {
                //set validation to fail if any of the conversion is failed
                validation = false;
            }
             
            return validation;
            
        }

        //method that clears all error messages
        public void clearErrorMessages()
        {
            this.inputErr="";
            this.lowerRangeErr="";
            this.higherRangeErr="";
            this.updateRuleErr="";
            this.posClampErr="";
            this.negClampErr="";
            this.numberOfParticlesErr="";
            this.numberOfTimeStepsErr="";
            this.numberOfRunsErr="";
        }

        //method that resets everything
        private void resetButton_Click(object sender, EventArgs e)
        {
            //enable all controls
            this.EnableAll();

            //showing PS Panel
            this.showPSPanel();

            //clearing charts data
            foreach (var series in chart1.Series)
            {
                series.Points.Clear();
            }
            foreach (var series in chart2.Series)
            {
                series.Points.Clear();
            }
            foreach (var series in chart3.Series)
            {
                series.Points.Clear();
            }
        }

        //method that enables all controls
        public void EnableAll()
        {
            this.inputFunctionTextBox.Enabled = true;
            this.lowerRangeTextBox.Enabled = true;
            this.higherRangeTextBox.Enabled = true;
            this.updateRuleComboBox.Enabled = true;
            this.posClampVelocityTextBox.Enabled = true;
            this.negClampVelocityTextBox.Enabled = true;
            this.numberOfParticlesComboBox.Enabled = true;
            this.numberOfTimeStepsComboBox.Enabled = true;
            this.numberOfRunsComboBox.Enabled = true;
            this.runPSOButton.Enabled = true;

            this.bestFitnessPlot.Enabled = true;
            this.averageFitnessPlot.Enabled = true;
            this.dispersionPlot.Enabled = true;
            this.showDataButton.Enabled = true;

            this.outputAverageFitness.Clear();
            this.OutputbestFitness.Clear();
            this.outputDispersion.Clear();

            this.bestFitnessPlot.Enabled = false;
            this.averageFitnessPlot.Enabled = false;
            this.dispersionPlot.Enabled = false;
            this.showDataButton.Enabled = false;

            //clearing dictionaries
            this.bestFitness_Average.Clear();
            this.averageFitness_Average.Clear();
            this.dispersion_Average.Clear();
        }

        //method that disables all controls
        public void DisableAll()
        {
            this.inputFunctionTextBox.Enabled = false;
            this.lowerRangeTextBox.Enabled = false;
            this.higherRangeTextBox.Enabled = false;
            this.updateRuleComboBox.Enabled = false;
            this.posClampVelocityTextBox.Enabled = false;
            this.negClampVelocityTextBox.Enabled = false;
            this.numberOfParticlesComboBox.Enabled = false;
            this.numberOfTimeStepsComboBox.Enabled = false;
            this.numberOfRunsComboBox.Enabled = false;
            this.runPSOButton.Enabled = false;
        }

        //method that enables output options
        public void EnableOutputOptions()
        {
            this.bestFitnessPlot.Enabled = true;
            this.averageFitnessPlot.Enabled = true;
            this.dispersionPlot.Enabled = true;
            this.showDataButton.Enabled = true;
        }

        //method that disables output options
        public void DisableOutPutOptions()
        {
            this.bestFitnessPlot.Enabled = false;
            this.averageFitnessPlot.Enabled = false;
            this.dispersionPlot.Enabled = false;
            this.showDataButton.Enabled = false;
        }


        

        

     

    }
}
