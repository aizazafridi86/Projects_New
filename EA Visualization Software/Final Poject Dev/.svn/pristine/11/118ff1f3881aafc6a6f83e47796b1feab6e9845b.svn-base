using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;

namespace EA_Visualization_Software.PSO_Algorithm
{
    class PSController
    {

        //Initializing Variables
        string inputFunction;
        int lowerRange;
        int higherRange;
        string updateRule;
        int posClampVelocity;
        int negClampVelocity;
        int numberOfParticles;
        int numberOfTimeSteps;
        int numberOfRuns;


        //This method set values of all variables that are passed by the GUI
        public void Initialize(string inputFunction,int lowerRange,int higherRange,string updateRule,int posClampVelocity,int negClampVelocity,int numberOfParticles,int numberOfTimeSteps,int numberOfRuns)
        {
            this.inputFunction = inputFunction;
            this.lowerRange = lowerRange;
            this.higherRange = higherRange;
            this.updateRule = updateRule;
            this.posClampVelocity = posClampVelocity;
            this.negClampVelocity = negClampVelocity;
            this.numberOfParticles = numberOfParticles;
            this.numberOfTimeSteps = numberOfTimeSteps;
            this.numberOfRuns = numberOfRuns;

        }

        //Running PS Algorithm
        public void RunPSAlgorithm()
        {
            /*for Debugging       
            System.Diagnostics.Debug.WriteLine(this.inputFunction);
            System.Diagnostics.Debug.WriteLine(this.lowerRange);
            System.Diagnostics.Debug.WriteLine(this.higherRange);
            System.Diagnostics.Debug.WriteLine(this.updateRule);
            System.Diagnostics.Debug.WriteLine(this.posClampVelocity);
            System.Diagnostics.Debug.WriteLine(this.negClampVelocity);
            System.Diagnostics.Debug.WriteLine(this.numberOfParticles);
            System.Diagnostics.Debug.WriteLine(this.numberOfTimeSteps);
            System.Diagnostics.Debug.WriteLine(this.numberOfRuns); */
             

        }
    }
}
