using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using NCalc;
using EA_Visualization_Software.Common;

namespace EA_Visualization_Software.PSO_Algorithm
{
    public class Particle
    {
        public string inputFunction;
        public int lowerRange;
        public int higherRange;
        public int posClampVelocity;
        public int negClampVelocity;
        public int numberOfTimeSteps;

        public List<double> genes = new List<double>();
        public List<string> initialGenes = new List<string>();
        public List<string> uniqueGenesFound = new List<string>();
        public int numberOfGenes;
        public List<double> velocity = new List<double>();

        public string inputFunctionForEvaluation;
       // public double fitness;

        public List<double> pbest = new List<double>();
        public double bestFitness;

        //Random random = new Random();

        public Particle(string inputFunction,int lowerRange,int higherRange,int posClampVelocity,int negClampVelocity,int numberOfTimeSteps)
        {
            this.inputFunction = inputFunction;
            this.lowerRange = lowerRange;
            this.higherRange = higherRange;
            this.posClampVelocity = posClampVelocity;
            this.negClampVelocity = negClampVelocity;
            this.numberOfTimeSteps = numberOfTimeSteps;

            //adding all variables to initialGenes list
            foreach (Match match in Regex.Matches(this.inputFunction,"[a-zA-Z]"))
            {
                this.initialGenes.Add(match.Value);
            }

            //adding only unique variables to genes list
            for(int i=0; i<initialGenes.Count; i++)
            {
                if(!uniqueGenesFound.Contains(initialGenes[i]))
                {
                    uniqueGenesFound.Add(initialGenes[i]);
                }
            }

            //Finally, initializing genes values
            for(int i=0; i<uniqueGenesFound.Count; i++)
            {
                //double value = random.NextDouble()*(this.higherRange - this.lowerRange) + this.lowerRange;
                RandomNumGenerator generator = new RandomNumGenerator();
                //int value = generator.Generate_Int(this.lowerRange, this.higherRange);
                double value = generator.Generate_Double(this.lowerRange, this.higherRange);
                this.genes.Add(value);
                
            }

            //copying number of genes to numberOfGenes variable
            //this.numberOfGenes = this.uniqueGenesFound.Count;
            this.numberOfGenes = this.genes.Count;
            
            //initializing particle velocity in all dimensions to 0
            for(int i=0; i<this.numberOfGenes; i++)
            {
                this.velocity.Add(0);
            }

            //initializing pbest list with the initial genes values
            for(int i=0; i<this.numberOfGenes; i++)
            {
                this.pbest.Add(this.genes[i]);
            }

            //initializing bestFitness
            this.bestFitness = this.CalculateFitness();

        }

        //Method to calculate fitness of particle
        public double CalculateFitness()
        {
           
            //replacing genes values in input function to calculate particle fitness
            for (int i = 0; i < this.numberOfGenes; i++)
            {
                string pattern = this.uniqueGenesFound[i];
                string replacement = this.genes[i].ToString();
                Regex rgx = new Regex(pattern);

                //replacing first gene
                if (i == 0)
                {
                    this.inputFunctionForEvaluation = rgx.Replace(this.inputFunction, replacement);
                }

                //replacing remaining genes
                else
                {
                    this.inputFunctionForEvaluation = rgx.Replace(this.inputFunctionForEvaluation, replacement);
                }
            }

            //evaluating fitness
            Expression e = new Expression(this.inputFunctionForEvaluation);
            var result = e.Evaluate();
            double fitness = Convert.ToDouble(result.ToString());

            return fitness;

            //for debugging
            //System.Diagnostics.Debug.WriteLine(this.fitness);

        }

        //method for calculating personal best values
        public void Calculate_Pbest()
        {
            //calcualting fitness 
            double fitnessInTimeStep = this.CalculateFitness();
            
            //copying genes values to pbest list if new fitness is less than the previous best fitness
            if(fitnessInTimeStep < Math.Abs(this.bestFitness))
            {
                this.bestFitness = fitnessInTimeStep;

                for(int i=0; i<this.numberOfGenes; i++)
                {
                    this.pbest[i] = this.genes[i];
                }
            }

        }

        //method to update linear decreasing velocity
        public void Update_LinearDecreasingVelocity(Particle gbest, double wt)
        {
            int c1 = 2;
            int c2 = 2;
            double r1, r2;

            for(int i=0; i<this.numberOfGenes; i++)
            {
                RandomNumGenerator generator = new RandomNumGenerator();

                r1 = generator.Generate_Double();
                r2 = generator.Generate_Double();
                this.velocity[i] = this.velocity[i] * wt + ((c1 * r1 * (this.pbest[i] - this.genes[i])) + (c2 * r2 * (gbest.genes[i] - this.genes[i])));

                //clamping positive velocity if it is out of range
                if(this.velocity[i] > this.posClampVelocity)
                {
                    this.velocity[i] = this.posClampVelocity;
                }

                //clamping negative velocity if it is out of range
                if(this.velocity[i] < this.negClampVelocity)
                {
                    this.velocity[i] = this.negClampVelocity;
                }
            }
        }

        //method to update linear increasing velocity
        public void Update_LinearIncreasingVelocity(Particle gbest, double wt)
        {
            double r1, r2, fi1, fi2;

            for(int i=0;i<this.numberOfGenes;i++)
            {
                RandomNumGenerator generator = new RandomNumGenerator();
                r1 = generator.Generate_Double();
                r2 = generator.Generate_Double();
                fi1 = 1.5 * r1 + 0.5;
                fi2 = 1.5 * r2 + 0.5;

                this.velocity[i] = this.velocity[i] * wt + (fi1 * (this.pbest[i] - this.genes[i]) + fi2 * (gbest.genes[i] - this.genes[i]));

                //clamping positive velocity if it is out of range
                if (this.velocity[i] > this.posClampVelocity)
                {
                    this.velocity[i] = this.posClampVelocity;
                }

                //clamping negative velocity if it is out of range
                if (this.velocity[i] < this.negClampVelocity)
                {
                    this.velocity[i] = this.negClampVelocity;
                }

            }
        }

        //method to update particle position
        public void Update_Position()
        {
            for(int i=0; i<this.numberOfGenes ; i++)
            {
                this.genes[i] = this.genes[i] + this.velocity[i];
            }
        }

        public void Return_InputFunctionForEvaluation()
        {
                /*foreach(var g in this.genes)
                {
                    System.Diagnostics.Debug.WriteLine(g);
                }*/
                
               System.Diagnostics.Debug.WriteLine(this.inputFunctionForEvaluation);
        }

        //method that returns particles fitness
        public double ReturnFitness()
        {
            return this.CalculateFitness();
        }

     }

  }

